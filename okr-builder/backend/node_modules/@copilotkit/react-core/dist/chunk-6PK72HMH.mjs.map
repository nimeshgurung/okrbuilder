{"version":3,"sources":["../src/components/copilot-provider/copilot-messages.tsx"],"sourcesContent":["/**\n * An internal context to separate the messages state (which is constantly changing) from the rest of CopilotKit context\n */\n\nimport { ReactNode, useEffect, useState, useRef } from \"react\";\nimport { CopilotMessagesContext } from \"../../context/copilot-messages-context\";\nimport { loadMessagesFromJsonRepresentation, Message } from \"@copilotkit/runtime-client-gql\";\nimport { useCopilotContext } from \"../../context/copilot-context\";\n\nexport function CopilotMessages({ children }: { children: ReactNode }) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const lastLoadedThreadId = useRef<string>();\n  const lastLoadedAgentName = useRef<string>();\n  const lastLoadedMessages = useRef<string>();\n\n  const { threadId, agentSession, runtimeClient } = useCopilotContext();\n\n  useEffect(() => {\n    if (!threadId || threadId === lastLoadedThreadId.current) return;\n    if (\n      threadId === lastLoadedThreadId.current &&\n      agentSession?.agentName === lastLoadedAgentName.current\n    ) {\n      return;\n    }\n\n    const fetchMessages = async () => {\n      if (!agentSession?.agentName) return;\n\n      const result = await runtimeClient.loadAgentState({\n        threadId,\n        agentName: agentSession?.agentName,\n      });\n\n      const newMessages = result.data?.loadAgentState?.messages;\n      if (newMessages === lastLoadedMessages.current) return;\n\n      if (result.data?.loadAgentState?.threadExists) {\n        lastLoadedMessages.current = newMessages;\n        lastLoadedThreadId.current = threadId;\n        lastLoadedAgentName.current = agentSession?.agentName;\n\n        const messages = loadMessagesFromJsonRepresentation(JSON.parse(newMessages || \"[]\"));\n        setMessages(messages);\n      }\n    };\n    void fetchMessages();\n  }, [threadId, agentSession?.agentName]);\n\n  return (\n    <CopilotMessagesContext.Provider\n      value={{\n        messages,\n        setMessages,\n      }}\n    >\n      {children}\n    </CopilotMessagesContext.Provider>\n  );\n}\n"],"mappings":";;;;;;;;;;;AAIA,SAAoB,WAAW,UAAU,cAAc;AAEvD,SAAS,0CAAmD;AA4CxD;AAzCG,SAAS,gBAAgB,EAAE,SAAS,GAA4B;AACrE,QAAM,CAAC,UAAU,WAAW,IAAI,SAAoB,CAAC,CAAC;AACtD,QAAM,qBAAqB,OAAe;AAC1C,QAAM,sBAAsB,OAAe;AAC3C,QAAM,qBAAqB,OAAe;AAE1C,QAAM,EAAE,UAAU,cAAc,cAAc,IAAI,kBAAkB;AAEpE,YAAU,MAAM;AACd,QAAI,CAAC,YAAY,aAAa,mBAAmB;AAAS;AAC1D,QACE,aAAa,mBAAmB,YAChC,6CAAc,eAAc,oBAAoB,SAChD;AACA;AAAA,IACF;AAEA,UAAM,gBAAgB,MAAY;AA1BtC;AA2BM,UAAI,EAAC,6CAAc;AAAW;AAE9B,YAAM,SAAS,MAAM,cAAc,eAAe;AAAA,QAChD;AAAA,QACA,WAAW,6CAAc;AAAA,MAC3B,CAAC;AAED,YAAM,eAAc,kBAAO,SAAP,mBAAa,mBAAb,mBAA6B;AACjD,UAAI,gBAAgB,mBAAmB;AAAS;AAEhD,WAAI,kBAAO,SAAP,mBAAa,mBAAb,mBAA6B,cAAc;AAC7C,2BAAmB,UAAU;AAC7B,2BAAmB,UAAU;AAC7B,4BAAoB,UAAU,6CAAc;AAE5C,cAAMA,YAAW,mCAAmC,KAAK,MAAM,eAAe,IAAI,CAAC;AACnF,oBAAYA,SAAQ;AAAA,MACtB;AAAA,IACF;AACA,SAAK,cAAc;AAAA,EACrB,GAAG,CAAC,UAAU,6CAAc,SAAS,CAAC;AAEtC,SACE;AAAA,IAAC,uBAAuB;AAAA,IAAvB;AAAA,MACC,OAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,MAEC;AAAA;AAAA,EACH;AAEJ;","names":["messages"]}