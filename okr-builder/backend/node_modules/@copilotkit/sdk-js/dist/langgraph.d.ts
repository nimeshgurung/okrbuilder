import * as zod from 'zod';
import * as _langchain_core_messages from '@langchain/core/messages';
import * as _langchain_langgraph from '@langchain/langgraph';
import { RunnableConfig } from '@langchain/core/runnables';
import { DynamicStructuredTool } from '@langchain/core/tools';

interface IntermediateStateConfig {
    stateKey: string;
    tool: string;
    toolArgument?: string;
}
interface OptionsConfig {
    emitToolCalls?: boolean | string | string[];
    emitMessages?: boolean;
    emitAll?: boolean;
    emitIntermediateState?: IntermediateStateConfig[];
}
declare const CopilotKitPropertiesAnnotation: _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<{
    actions: {
        (): _langchain_langgraph.LastValue<any[]>;
        (annotation: _langchain_langgraph.SingleReducer<any[], any[]>): _langchain_langgraph.BinaryOperatorAggregate<any[], any[]>;
        Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
    };
}>;
declare const CopilotKitStateAnnotation: _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<{
    messages: _langchain_langgraph.BinaryOperatorAggregate<_langchain_core_messages.BaseMessage[], _langchain_langgraph.Messages>;
    copilotkit: {
        (): _langchain_langgraph.LastValue<_langchain_langgraph.StateType<{
            actions: {
                (): _langchain_langgraph.LastValue<any[]>;
                (annotation: _langchain_langgraph.SingleReducer<any[], any[]>): _langchain_langgraph.BinaryOperatorAggregate<any[], any[]>;
                Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
            };
        }>>;
        (annotation: _langchain_langgraph.SingleReducer<_langchain_langgraph.StateType<{
            actions: {
                (): _langchain_langgraph.LastValue<any[]>;
                (annotation: _langchain_langgraph.SingleReducer<any[], any[]>): _langchain_langgraph.BinaryOperatorAggregate<any[], any[]>;
                Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
            };
        }>, _langchain_langgraph.StateType<{
            actions: {
                (): _langchain_langgraph.LastValue<any[]>;
                (annotation: _langchain_langgraph.SingleReducer<any[], any[]>): _langchain_langgraph.BinaryOperatorAggregate<any[], any[]>;
                Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
            };
        }>>): _langchain_langgraph.BinaryOperatorAggregate<_langchain_langgraph.StateType<{
            actions: {
                (): _langchain_langgraph.LastValue<any[]>;
                (annotation: _langchain_langgraph.SingleReducer<any[], any[]>): _langchain_langgraph.BinaryOperatorAggregate<any[], any[]>;
                Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
            };
        }>, _langchain_langgraph.StateType<{
            actions: {
                (): _langchain_langgraph.LastValue<any[]>;
                (annotation: _langchain_langgraph.SingleReducer<any[], any[]>): _langchain_langgraph.BinaryOperatorAggregate<any[], any[]>;
                Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
            };
        }>>;
        Root: <S extends _langchain_langgraph.StateDefinition>(sd: S) => _langchain_langgraph._INTERNAL_ANNOTATION_ROOT<S>;
    };
}>;
type CopilotKitState = typeof CopilotKitStateAnnotation.State;
type CopilotKitProperties = typeof CopilotKitPropertiesAnnotation.State;
/**
 * Customize the LangGraph configuration for use in CopilotKit.
 *
 * To the CopilotKit SDK, run:
 *
 * ```bash
 * npm install @copilotkit/sdk-js
 * ```
 *
 * ### Examples
 *
 * Disable emitting messages and tool calls:
 *
 * ```typescript
 * import { copilotkitCustomizeConfig } from "@copilotkit/sdk-js";
 *
 * config = copilotkitCustomizeConfig(
 *   config,
 *   emitMessages=false,
 *   emitToolCalls=false
 * )
 * ```
 *
 * To emit a tool call as streaming LangGraph state, pass the destination key in state,
 * the tool name and optionally the tool argument. (If you don't pass the argument name,
 * all arguments are emitted under the state key.)
 *
 * ```typescript
 * import { copilotkitCustomizeConfig } from "@copilotkit/sdk-js";
 *
 * config = copilotkitCustomizeConfig(
 *   config,
 *   emitIntermediateState=[
 *     {
 *       "stateKey": "steps",
 *       "tool": "SearchTool",
 *       "toolArgument": "steps",
 *     },
 *   ],
 * )
 * ```
 */
declare function copilotkitCustomizeConfig(
/**
 * The LangChain/LangGraph configuration to customize.
 */
baseConfig: RunnableConfig, 
/**
 * Configuration options:
 * - `emitMessages: boolean?`
 *   Configure how messages are emitted. By default, all messages are emitted. Pass false to
 *   disable emitting messages.
 * - `emitToolCalls: boolean | string | string[]?`
 *   Configure how tool calls are emitted. By default, all tool calls are emitted. Pass false to
 *   disable emitting tool calls. Pass a string or list of strings to emit only specific tool calls.
 * - `emitIntermediateState: IntermediateStateConfig[]?`
 *   Lets you emit tool calls as streaming LangGraph state.
 */
options?: OptionsConfig): RunnableConfig;
/**
 * Exits the current agent after the run completes. Calling copilotkit_exit() will
 * not immediately stop the agent. Instead, it signals to CopilotKit to stop the agent after
 * the run completes.
 *
 * ### Examples
 *
 * ```typescript
 * import { copilotkitExit } from "@copilotkit/sdk-js";
 *
 * async function myNode(state: Any):
 *   await copilotkitExit(config)
 *   return state
 * ```
 */
declare function copilotkitExit(
/**
 * The LangChain/LangGraph configuration.
 */
config: RunnableConfig): Promise<void>;
/**
 * Emits intermediate state to CopilotKit. Useful if you have a longer running node and you want to
 * update the user with the current state of the node.
 *
 * ### Examples
 *
 * ```typescript
 * import { copilotkitEmitState } from "@copilotkit/sdk-js";
 *
 * for (let i = 0; i < 10; i++) {
 *   await someLongRunningOperation(i);
 *   await copilotkitEmitState(config, { progress: i });
 * }
 * ```
 */
declare function copilotkitEmitState(
/**
 * The LangChain/LangGraph configuration.
 */
config: RunnableConfig, 
/**
 * The state to emit.
 */
state: any): Promise<void>;
/**
 * Manually emits a message to CopilotKit. Useful in longer running nodes to update the user.
 * Important: You still need to return the messages from the node.
 *
 * ### Examples
 *
 * ```typescript
 * import { copilotkitEmitMessage } from "@copilotkit/sdk-js";
 *
 * const message = "Step 1 of 10 complete";
 * await copilotkitEmitMessage(config, message);
 *
 * // Return the message from the node
 * return {
 *   "messages": [AIMessage(content=message)]
 * }
 * ```
 */
declare function copilotkitEmitMessage(
/**
 * The LangChain/LangGraph configuration.
 */
config: RunnableConfig, 
/**
 * The message to emit.
 */
message: string): Promise<void>;
/**
 * Manually emits a tool call to CopilotKit.
 *
 * ### Examples
 *
 * ```typescript
 * import { copilotkitEmitToolCall } from "@copilotkit/sdk-js";
 *
 * await copilotkitEmitToolCall(config, name="SearchTool", args={"steps": 10})
 * ```
 */
declare function copilotkitEmitToolCall(
/**
 * The LangChain/LangGraph configuration.
 */
config: RunnableConfig, 
/**
 * The name of the tool to emit.
 */
name: string, 
/**
 * The arguments to emit.
 */
args: any): Promise<void>;
declare function convertActionToDynamicStructuredTool(actionInput: any): DynamicStructuredTool<zod.ZodType<any, zod.ZodTypeDef, any>>;
/**
 * Use this function to convert a list of actions you get from state
 * to a list of dynamic structured tools.
 *
 * ### Examples
 *
 * ```typescript
 * import { convertActionsToDynamicStructuredTools } from "@copilotkit/sdk-js";
 *
 * const tools = convertActionsToDynamicStructuredTools(state.copilotkit.actions);
 * ```
 */
declare function convertActionsToDynamicStructuredTools(
/**
 * The list of actions to convert.
 */
actions: any[]): DynamicStructuredTool<zod.ZodType<any, zod.ZodTypeDef, any>>[];
declare function copilotKitInterrupt({ message, action, args, }: {
    message?: string;
    action?: string;
    args?: Record<string, any>;
}): {
    answer: any;
    messages: any;
};

export { CopilotKitProperties, CopilotKitPropertiesAnnotation, CopilotKitState, CopilotKitStateAnnotation, convertActionToDynamicStructuredTool, convertActionsToDynamicStructuredTools, copilotKitInterrupt, copilotkitCustomizeConfig, copilotkitEmitMessage, copilotkitEmitState, copilotkitEmitToolCall, copilotkitExit };
