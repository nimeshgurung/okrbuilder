var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/langgraph.ts
import { dispatchCustomEvent } from "@langchain/core/callbacks/dispatch";
import { convertJsonSchemaToZodSchema, randomId } from "@copilotkit/shared";
import { Annotation, MessagesAnnotation, interrupt } from "@langchain/langgraph";
import { DynamicStructuredTool } from "@langchain/core/tools";
import { AIMessage } from "@langchain/core/messages";
var CopilotKitPropertiesAnnotation = Annotation.Root({
  actions: Annotation
});
var CopilotKitStateAnnotation = Annotation.Root({
  copilotkit: Annotation,
  ...MessagesAnnotation.spec
});
function copilotkitCustomizeConfig(baseConfig, options) {
  const metadata = (baseConfig == null ? void 0 : baseConfig.metadata) || {};
  if (options == null ? void 0 : options.emitAll) {
    metadata["copilotkit:emit-tool-calls"] = true;
    metadata["copilotkit:emit-messages"] = true;
  } else {
    if ((options == null ? void 0 : options.emitToolCalls) !== void 0) {
      metadata["copilotkit:emit-tool-calls"] = options.emitToolCalls;
    }
    if ((options == null ? void 0 : options.emitMessages) !== void 0) {
      metadata["copilotkit:emit-messages"] = options.emitMessages;
    }
  }
  if (options == null ? void 0 : options.emitIntermediateState) {
    const snakeCaseIntermediateState = options.emitIntermediateState.map((state) => ({
      tool: state.tool,
      tool_argument: state.toolArgument,
      state_key: state.stateKey
    }));
    metadata["copilotkit:emit-intermediate-state"] = snakeCaseIntermediateState;
  }
  baseConfig = baseConfig || {};
  return {
    ...baseConfig,
    metadata
  };
}
__name(copilotkitCustomizeConfig, "copilotkitCustomizeConfig");
async function copilotkitExit(config) {
  await dispatchCustomEvent("copilotkit_exit", {}, config);
}
__name(copilotkitExit, "copilotkitExit");
async function copilotkitEmitState(config, state) {
  await dispatchCustomEvent("copilotkit_manually_emit_intermediate_state", state, config);
}
__name(copilotkitEmitState, "copilotkitEmitState");
async function copilotkitEmitMessage(config, message) {
  await dispatchCustomEvent("copilotkit_manually_emit_message", {
    message,
    message_id: randomId(),
    role: "assistant"
  }, config);
}
__name(copilotkitEmitMessage, "copilotkitEmitMessage");
async function copilotkitEmitToolCall(config, name, args) {
  await dispatchCustomEvent("copilotkit_manually_emit_tool_call", {
    name,
    args,
    id: randomId()
  }, config);
}
__name(copilotkitEmitToolCall, "copilotkitEmitToolCall");
function convertActionToDynamicStructuredTool(actionInput) {
  return new DynamicStructuredTool({
    name: actionInput.name,
    description: actionInput.description,
    schema: convertJsonSchemaToZodSchema(actionInput.parameters, true),
    func: async () => {
      return "";
    }
  });
}
__name(convertActionToDynamicStructuredTool, "convertActionToDynamicStructuredTool");
function convertActionsToDynamicStructuredTools(actions) {
  return actions.map((action) => convertActionToDynamicStructuredTool(action));
}
__name(convertActionsToDynamicStructuredTools, "convertActionsToDynamicStructuredTools");
function copilotKitInterrupt({ message, action, args }) {
  if (!message && !action) {
    throw new Error("Either message or action (and optional arguments) must be provided");
  }
  let interruptValues = null;
  let interruptMessage = null;
  let answer = null;
  if (message) {
    interruptValues = message;
    interruptMessage = new AIMessage({
      content: message,
      id: randomId()
    });
  } else {
    const toolId = randomId();
    interruptMessage = new AIMessage({
      content: "",
      tool_calls: [
        {
          id: toolId,
          name: action,
          args: args ?? {}
        }
      ]
    });
    interruptValues = {
      action,
      args: args ?? {}
    };
  }
  const response = interrupt({
    __copilotkit_interrupt_value__: interruptValues,
    __copilotkit_messages__: [
      interruptMessage
    ]
  });
  answer = response[response.length - 1].content;
  return {
    answer,
    messages: response
  };
}
__name(copilotKitInterrupt, "copilotKitInterrupt");

export {
  CopilotKitPropertiesAnnotation,
  CopilotKitStateAnnotation,
  copilotkitCustomizeConfig,
  copilotkitExit,
  copilotkitEmitState,
  copilotkitEmitMessage,
  copilotkitEmitToolCall,
  convertActionToDynamicStructuredTool,
  convertActionsToDynamicStructuredTools,
  copilotKitInterrupt
};
//# sourceMappingURL=chunk-B5CQATKH.mjs.map