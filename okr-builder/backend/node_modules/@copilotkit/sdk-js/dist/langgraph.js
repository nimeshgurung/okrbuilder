var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/langgraph.ts
var langgraph_exports = {};
__export(langgraph_exports, {
  CopilotKitPropertiesAnnotation: () => CopilotKitPropertiesAnnotation,
  CopilotKitStateAnnotation: () => CopilotKitStateAnnotation,
  convertActionToDynamicStructuredTool: () => convertActionToDynamicStructuredTool,
  convertActionsToDynamicStructuredTools: () => convertActionsToDynamicStructuredTools,
  copilotKitInterrupt: () => copilotKitInterrupt,
  copilotkitCustomizeConfig: () => copilotkitCustomizeConfig,
  copilotkitEmitMessage: () => copilotkitEmitMessage,
  copilotkitEmitState: () => copilotkitEmitState,
  copilotkitEmitToolCall: () => copilotkitEmitToolCall,
  copilotkitExit: () => copilotkitExit
});
module.exports = __toCommonJS(langgraph_exports);
var import_dispatch = require("@langchain/core/callbacks/dispatch");
var import_shared = require("@copilotkit/shared");
var import_langgraph = require("@langchain/langgraph");
var import_tools = require("@langchain/core/tools");
var import_messages = require("@langchain/core/messages");
var CopilotKitPropertiesAnnotation = import_langgraph.Annotation.Root({
  actions: import_langgraph.Annotation
});
var CopilotKitStateAnnotation = import_langgraph.Annotation.Root({
  copilotkit: import_langgraph.Annotation,
  ...import_langgraph.MessagesAnnotation.spec
});
function copilotkitCustomizeConfig(baseConfig, options) {
  const metadata = (baseConfig == null ? void 0 : baseConfig.metadata) || {};
  if (options == null ? void 0 : options.emitAll) {
    metadata["copilotkit:emit-tool-calls"] = true;
    metadata["copilotkit:emit-messages"] = true;
  } else {
    if ((options == null ? void 0 : options.emitToolCalls) !== void 0) {
      metadata["copilotkit:emit-tool-calls"] = options.emitToolCalls;
    }
    if ((options == null ? void 0 : options.emitMessages) !== void 0) {
      metadata["copilotkit:emit-messages"] = options.emitMessages;
    }
  }
  if (options == null ? void 0 : options.emitIntermediateState) {
    const snakeCaseIntermediateState = options.emitIntermediateState.map((state) => ({
      tool: state.tool,
      tool_argument: state.toolArgument,
      state_key: state.stateKey
    }));
    metadata["copilotkit:emit-intermediate-state"] = snakeCaseIntermediateState;
  }
  baseConfig = baseConfig || {};
  return {
    ...baseConfig,
    metadata
  };
}
__name(copilotkitCustomizeConfig, "copilotkitCustomizeConfig");
async function copilotkitExit(config) {
  await (0, import_dispatch.dispatchCustomEvent)("copilotkit_exit", {}, config);
}
__name(copilotkitExit, "copilotkitExit");
async function copilotkitEmitState(config, state) {
  await (0, import_dispatch.dispatchCustomEvent)("copilotkit_manually_emit_intermediate_state", state, config);
}
__name(copilotkitEmitState, "copilotkitEmitState");
async function copilotkitEmitMessage(config, message) {
  await (0, import_dispatch.dispatchCustomEvent)("copilotkit_manually_emit_message", {
    message,
    message_id: (0, import_shared.randomId)(),
    role: "assistant"
  }, config);
}
__name(copilotkitEmitMessage, "copilotkitEmitMessage");
async function copilotkitEmitToolCall(config, name, args) {
  await (0, import_dispatch.dispatchCustomEvent)("copilotkit_manually_emit_tool_call", {
    name,
    args,
    id: (0, import_shared.randomId)()
  }, config);
}
__name(copilotkitEmitToolCall, "copilotkitEmitToolCall");
function convertActionToDynamicStructuredTool(actionInput) {
  return new import_tools.DynamicStructuredTool({
    name: actionInput.name,
    description: actionInput.description,
    schema: (0, import_shared.convertJsonSchemaToZodSchema)(actionInput.parameters, true),
    func: async () => {
      return "";
    }
  });
}
__name(convertActionToDynamicStructuredTool, "convertActionToDynamicStructuredTool");
function convertActionsToDynamicStructuredTools(actions) {
  return actions.map((action) => convertActionToDynamicStructuredTool(action));
}
__name(convertActionsToDynamicStructuredTools, "convertActionsToDynamicStructuredTools");
function copilotKitInterrupt({ message, action, args }) {
  if (!message && !action) {
    throw new Error("Either message or action (and optional arguments) must be provided");
  }
  let interruptValues = null;
  let interruptMessage = null;
  let answer = null;
  if (message) {
    interruptValues = message;
    interruptMessage = new import_messages.AIMessage({
      content: message,
      id: (0, import_shared.randomId)()
    });
  } else {
    const toolId = (0, import_shared.randomId)();
    interruptMessage = new import_messages.AIMessage({
      content: "",
      tool_calls: [
        {
          id: toolId,
          name: action,
          args: args ?? {}
        }
      ]
    });
    interruptValues = {
      action,
      args: args ?? {}
    };
  }
  const response = (0, import_langgraph.interrupt)({
    __copilotkit_interrupt_value__: interruptValues,
    __copilotkit_messages__: [
      interruptMessage
    ]
  });
  answer = response[response.length - 1].content;
  return {
    answer,
    messages: response
  };
}
__name(copilotKitInterrupt, "copilotKitInterrupt");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CopilotKitPropertiesAnnotation,
  CopilotKitStateAnnotation,
  convertActionToDynamicStructuredTool,
  convertActionsToDynamicStructuredTools,
  copilotKitInterrupt,
  copilotkitCustomizeConfig,
  copilotkitEmitMessage,
  copilotkitEmitState,
  copilotkitEmitToolCall,
  copilotkitExit
});
//# sourceMappingURL=langgraph.js.map